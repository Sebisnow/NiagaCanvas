/*
 * @(#)Window.java   1.0   Feb 16, 2011
 *
 * Copyright (c) 2011-2012 Portland State University.
 * Copyright (c) 2013-2015 University of Konstanz.
 *
 * This software is the proprietary information of the above-mentioned institutions.
 * Use is subject to license terms. Please refer to the included copyright notice.
 */
package niagarino.operator;

import niagarino.stream.Schema;

/**
 * Common superclass for different window implementations.
 *
 * @author Michael Grossniklaus &lt;michagro@cecs.pdx.edu&gt;
 * @version 1.0
 */
public abstract class Window extends Segment {

   /** Size of the windows. */
   private final long size;
   /** Slide of the windows. */
   private final long slide;
   /** Number of window panes (sub-windows) in one window. */
   private final int maxWindows;

   /**
    * Constructs a new window operator with the given input schema, which generates windows
    * that contain the given number of tuples and slide by the given value.
    *
    * @param operatorId
    *           id of operator
    * @param inputSchema
    *           input schema
    * @param size
    *           size of the window
    * @param slide
    *           slide of the window
    */
   protected Window(final String operatorId, final Schema inputSchema, final long size,
         final long slide) {
      super(operatorId, inputSchema);
      if (slide <= 0) {
         throw new IllegalArgumentException("Slide cannot be smaller or equal to zero.");
      }
      this.size = size;
      this.slide = slide;
      final double ratio = Math.floor(size / slide);
      if (ratio > Integer.MAX_VALUE) {
         throw new IllegalArgumentException("Ratio size/slide is too large: " + ratio
               + " > " + Integer.MAX_VALUE + ".");
      }
      this.maxWindows = (int) ratio;
   }

   /**
    * Returns the size of the windows generated by this operator.
    *
    * @return window size
    */
   protected long getSize() {
      return this.size;
   }

   /**
    * Returns the slide of the windows generated by this operator.
    *
    * @return window slide
    */
   protected long getSlide() {
      return this.slide;
   }

   /**
    * Returns the number of window panes (sub-windows) contained in each window generated by
    * this operator.
    *
    * @return number of window panes
    */
   protected int getMaxWindows() {
      return this.maxWindows;
   }

   /**
    * Returns whether the windows generated by this operator are tumbling windows.
    *
    * @return <code>true</code> if the generated windows are tumbling, <code>false</code>
    *         otherwise
    */
   public boolean isTumbling() {
      return this.size == this.slide;
   }
}
