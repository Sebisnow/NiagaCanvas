package niagaCanvas;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RectangularShape;
import java.util.ArrayList;
import java.util.Collections;
import java.util.IdentityHashMap;
import java.util.Objects;
import java.util.Set;

import jkanvas.KanvasContext;
import jkanvas.animation.AnimatedPosition;
import jkanvas.animation.AnimationList;
import jkanvas.nodelink.EdgeRealizer;
import jkanvas.nodelink.NodeLinkView;
import jkanvas.nodelink.NodeRealizer;
import jkanvas.nodelink.layout.LayoutedView;
import jkanvas.painter.Renderpass;

/**
 * Paints a layouted node-link diagram.
 * 
 * @author Sebastian
 * @param <T>
 *            The type of nodes.
 */
public class DefaultNodeLinkRenderpass<T extends AnimatedPosition> extends Renderpass {

	/** The bounding box. */
	private final Rectangle2D bbox;

	/** The layout view if any. */
	private final LayoutedView<T> layout;

	/** The view on the graph. */
	protected final SimpleNodeLinkView<T> view;

	/** The node realizer. */
	private NodeRealizer<T> nodeRealizer;
	/** The node realizer. */

	/** The edge realizer. */
	private EdgeRealizer<T> edgeRealizer;

	/** The animation list. */
	private AnimationList list;

	/**
	 * Creates a node-link painter.
	 * 
	 * @param view
	 *            The view on the graph.
	 */
	@SuppressWarnings("unchecked")
	public DefaultNodeLinkRenderpass(final LayoutedView<T> view) {
		this.view = (SimpleNodeLinkView<T>) Objects.requireNonNull(view);
		this.layout = view;
		this.bbox = null;
	}

	/**
	 * Creates a node-link painter.
	 * 
	 * @param view
	 *            The view on the graph.
	 * @param bbox
	 *            The bounding box of the render pass.
	 */
	@SuppressWarnings("unchecked")
	public DefaultNodeLinkRenderpass(final NodeLinkView<T> view, final Rectangle2D bbox) {
		this.view = (SimpleNodeLinkView<T>) Objects.requireNonNull(view);
		this.bbox = Objects.requireNonNull(bbox);
		this.layout = null;
	}

	/**
	 * Setter.
	 * 
	 * @param edgeRealizer
	 *            The edge realizer.
	 */
	public void setEdgeRealizer(final EdgeRealizer<T> edgeRealizer) {
		this.edgeRealizer = Objects.requireNonNull(edgeRealizer);
	}

	/**
	 * Getter.
	 * 
	 * @return The current edge realizer.
	 */
	public EdgeRealizer<T> getEdgeRealizer() {
		return this.edgeRealizer;
	}

	/**
	 * Setter.
	 * 
	 * @param nodeRealizer
	 *            The node realizer.
	 */
	public void setNodeRealizer(final NodeRealizer<T> nodeRealizer) {
		this.nodeRealizer = Objects.requireNonNull(nodeRealizer);
	}

	/**
	 * Getter.
	 * 
	 * @return The current node realizer.
	 */
	public NodeRealizer<T> getNodeRealizer() {
		return this.nodeRealizer;
	}

	@Override
	public void draw(final Graphics2D gfx, final KanvasContext ctx) {
		renderEdges(gfx, ctx);
		renderNodes(gfx, ctx);
	}

	/** The node set. This set is used to detect whether a node is new. */
	private final Set<T> lastNodes = Collections.newSetFromMap(new IdentityHashMap<T, Boolean>());

	/**
	 * Renders all nodes and differentiates between Streams and Operators.
	 * 
	 * @param gfx
	 *            The graphics context.
	 * @param ctx
	 *            The canvas context.
	 */
	@SuppressWarnings("unchecked")
	private void renderNodes(final Graphics2D gfx, final KanvasContext ctx) {
		System.out.println("Start render");
		final Rectangle2D visible = ctx.getVisibleCanvas();
		final RectangularNodeRealizer<T> streamRealizer = new RectangularNodeRealizer<T>();
		final DefaultNodeRealizer<T> operatorRealizer = new DefaultNodeRealizer<T>();
		int count = 0, secCount = 0;

		this.checkOperatorsStreamID();
		this.checkAllEdges();

		// no Stream on Canvas, create one.
		if (this.view.getStreams().size() == 0) {
			this.view.addNode((T) new Stream(200, 300));
		}
		this.checkStreams();
		for (final Stream node : this.view.getStreams()) {
			++count;
			// automatically adds new nodes to the animation list
			// this needs only to be done in the draw method
			if (!this.lastNodes.contains(node)) {
				this.list.addAnimated(node);
				this.lastNodes.add((T) node);
			}
			final double x = node.getX();
			final double y = node.getY();
			final Shape nodeShape = streamRealizer.createNodeShape((T) node, x, y);
			if (!nodeShape.intersects(visible)) {
				--count;
				continue;
			}
			final Graphics2D g = (Graphics2D) gfx.create();
			if (this.view.getSelected() == node) {
				g.setColor(Color.DARK_GRAY);
			}
			g.setComposite(AlphaComposite.getInstance(10, 0.5f));
			streamRealizer.drawNode(g, (T) node);
			g.dispose();
		}
		System.out.println("OperatorIDs: " + this.view.getOperators());
		for (final Operator node : this.view.getOperators()) {
			// System.out.println(" one Operator: " + node.getID());
			ArrayList<Stream> intersectList = new ArrayList<Stream>();
			for (final Stream stream : this.view.getStreams()) {
				final Shape nodeShape = streamRealizer.createNodeShape((T) stream, stream.getX(), stream.getY());
				if (nodeShape.contains(node.getPos())) {
					intersectList.add(stream);
				}
			}
			if (intersectList.size() > 0) {

				++secCount;

				// automatically adds new nodes to the animation list
				// this needs only to be done in the draw method
				if (!this.lastNodes.contains(node)) {
					this.list.addAnimated(node);
					this.lastNodes.add((T) node);
				}
				final Graphics2D g = (Graphics2D) gfx.create();
				if (this.view.getSelected() == node) {
					// System.out.println("Should be colored");
					g.setColor(Color.DARK_GRAY);
				}
				g.setComposite(AlphaComposite.getInstance(2, 1.0f));

				// Stream stream = (Stream)
				// this.view.getNode(node.getStreamID());
				/*
				 * If the node is the start node in the stream draw on upper
				 * part of stream on the same position of the Stream but on the
				 * smallest y value. If it is the end node do the same except
				 * the position should be at the highest y value.
				 */
				// if (node == stream.getStart()) {
				// double y = streamShape.getBounds2D().getMinY() + 1;
				// node.setPosition(stream.getX(), y);
				// System.out.println("Start repos");
				// } else if (node == stream.getEnd()) {
				// double y = streamShape.getBounds2D().getMaxY() - 1;
				// node.setPosition(stream.getX(), y);
				//
				// System.out.println("End repos");
				// }

				operatorRealizer.drawNode(g, (T) node);
				g.dispose();
			} else {
				// There is no Stream intersecting this Operator, move it.
				if (node.getStreamID() != NiagarinoOperators.INVALID) {
					node.setPosition(this.view.getNode(node.getStreamID()).getPos());
				} else {
					Stream stream = this.view.getStreams().get(0);

					stream.addOperator(node);
					node.setPosition(stream.getPos());
				}
			}

		}
		if (count + secCount < this.lastNodes.size()) {
			// System.out.println("Clear nodes");
			// clear set when nodes got removed
			this.lastNodes.clear();
		}
	}

	/**
	 * Helper Method, that checks the OperatorLists of all Streams in this view
	 * to make sure there are no Operators on more than one Stream.
	 * 
	 */
	private void checkStreams() {
		for (Stream st : this.view.getStreams()) {
			for (Stream secSt : this.view.getStreams()) {
				if (st != secSt)
					this.checkOperators(secSt, st);
			}
		}
	}

	/**
	 * Helper Method, that compares the Operators in two Streams and deletes the
	 * Operator from one Stream if it is contained in both. If the operator that
	 * is in both Streams has a StreamID set it is deleted from the other stream
	 * and kept in the Stream the Operator belongs to.
	 * 
	 */
	public void checkOperators(Stream fstStream, Stream secStream) {
		ArrayList<Operator> opList = new ArrayList<Operator>(fstStream.getOperatorList());
		for (Operator op : opList) {
			if (secStream.getOperatorList().contains(op)) {
				System.out.println("CHecked the Streams Operator and removed");
				if (this.view.getNode(op.getStreamID()) == fstStream) {
					System.out.println("Removed from second" + secStream.getID());
					secStream.getOperatorList().remove(op);
				} else {
					op.setStreamID(secStream);
					System.out.println("Removed from first" + fstStream.getID());
					fstStream.getOperatorList().remove(op);
				}
			}
		}
	}

	/**
	 * Check the properties of all Edges
	 * 
	 * @return returns whether the Edge is allowed to be drawn or not.
	 */
	public void checkAllEdges() {
		for (final T from : this.view.nodes()) {
			for (final int toId : this.view.edgesFrom(this.view.getId(from))) {
				if (!this.view.checkNodeProperties(from, this.view.getNode(toId))) {
					// delete. ok? edges
					this.view.removeEdge(from, this.view.getNode(toId));
				}
			}
		}
	}

	/**
	 * Renders all edges.
	 * 
	 * @param gfx
	 *            The graphics context.
	 * @param ctx
	 *            The canvas context.
	 */
	private void renderEdges(final Graphics2D gfx, final KanvasContext ctx) {
		final Rectangle2D visible = ctx.getVisibleCanvas();
		final EdgeRealizer<T> edgeRealizer = getEdgeRealizer();
		for (final T from : this.view.nodes()) {
			for (final int toId : this.view.edgesFrom(this.view.getId(from))) {
				// System.out.println("Edges from: " + toId);
				// if (!this.view.checkNodeProperties(from,
				// this.view.getNode(toId))) {
				// this.view.removeEdge(((NiagarinoOperators) from).getID(),
				// toId);
				// System.out.println("Continuing");
				// continue;
				// }
				/*
				 * Check whether Node exists if not remove from edges set of
				 * from node. TO DO There is an issue here with directed edges
				 * if you remove the node that is the target an error is thrown.
				 * Maybe there is a check too much. Correct in
				 * SimpleNodeLinkView.
				 */
				if (this.view.getNode(toId) != null) {
					final T to = this.view.getNode(toId);

					final Shape edgeShape = edgeRealizer.createLineShape(from, to);

					if (!edgeShape.intersects(visible)) {
						continue;
					}
					final Graphics2D g = (Graphics2D) gfx.create();
					g.setComposite(AlphaComposite.getInstance(2, 0.8f));
					edgeRealizer.drawLines(g, edgeShape, from, to);
					g.dispose();
				} else {
					this.view.removeEdge(this.view.getId(from), toId);
				}

			}
		}
	}

	/**
	 * Finds a node at the given position. Prefers Operators.
	 * 
	 * @param pos
	 *            The position.
	 * @return The node or <code>null</code> if there is no node at the given
	 *         position. Returns Operator if there is an Operator and a Stream.
	 */
	public T pick(final Point2D pos) {
		final RectangularNodeRealizer<T> streamRealizer = new RectangularNodeRealizer<T>();
		final DefaultNodeRealizer<T> operatorRealizer = new DefaultNodeRealizer<T>();
		T cur = null, op = null;
		for (final T node : this.view.nodes()) {
			final double x = node.getX(), y = node.getY();
			Shape shape = streamRealizer.createNodeShape(node, x, y);
			if (node instanceof Operator) {
				shape = operatorRealizer.createNodeShape(node, x, y);
				if (shape.contains(pos)) {
					op = node;
				}
			}
			if (shape.contains(pos)) {
				cur = node;
			}
		}
		return op != null ? (T) op : cur;
	}

	/**
	 * Finds a submerged node at the given position, if no node is underneath
	 * another the only node is returned or null if there is non at all.
	 * 
	 * @param pos
	 *            The position.
	 * @return The node or <code>null</code> if there is no node at the given
	 *         position.
	 */
	@SuppressWarnings("unused")
	public T pickSub(final Point2D pos) {
		final NodeRealizer<T> nodeRealizer = getNodeRealizer();
		T cur = null;
		T last = null;
		for (final T node : this.view.nodes()) {
			final double x = node.getX();
			final double y = node.getY();
			final Shape shape = nodeRealizer.createNodeShape(node, x, y);
			if (shape.contains(pos)) {
				// return the last match -- ie topmost node
				if (last != null) {
					last = node;
				}
				cur = node;
			}
		}
		return last;
	}

	/**
	 * draw shape around the position and check whether that shape intersects
	 * the shape of another node. Gives preference to Streams.
	 * 
	 * @param pos
	 *            The position.
	 * @return The node or <code>null</code> if there is no node at the given
	 *         position.
	 */
	@SuppressWarnings("unchecked")
	public T pickShape(final Point2D pos) {
		final NodeRealizer<T> nodeRealizer = getNodeRealizer();
		final Shape shapeNode = nodeRealizer.createNodeShape(pick(pos), pos.getX(), pos.getY());

		T last = null;
		Stream stream = null;
		for (final T node : this.view.nodes()) {
			final Shape shape = nodeRealizer.createNodeShape(node, node.getX(), node.getY());
			if (shape.intersects(shapeNode.getBounds2D())) {
				if (last == null) {
					if (node instanceof Stream) {
						stream = (Stream) node;
					}
					last = node;
				}
			}
		}
		return stream != null ? (T) stream : last;
	}

	/**
	 * Checks whether all Operators have a Stream ID if not check whether it
	 * intersects a stream to set a Stream ID if not assign one randomly.
	 * 
	 */
	@SuppressWarnings("unchecked")
	public void checkOperatorsStreamID() {
		final RectangularNodeRealizer<T> streamRealizer = new RectangularNodeRealizer<T>();
		for (Operator op : this.view.getOperators()) {
			if (op.getStreamID() == niagaCanvas.NiagarinoOperators.INVALID) {
				// No Stream ID yet.
				boolean intersect = false;
				Stream lastStream = null;
				for (final Stream stream : this.view.getStreams()) {
					lastStream = stream;
					final Shape nodeShape = streamRealizer.createNodeShape((T) stream, stream.getX(), stream.getY());
					if (nodeShape.contains(op.getPos())) {
						stream.addOperator(op);
						intersect = true;
						break;
					}
				}
				if (!intersect) {
					lastStream.addOperator(op);
				}
			}
		}
	}

	@Override
	public void setAnimationList(final AnimationList list) {
		this.list = Objects.requireNonNull(list);
	}

	/**
	 * Getter.
	 * 
	 * @return The animation list.
	 */
	protected AnimationList getAnimationList() {
		return this.list;
	}

	@Override
	public boolean isChanging() {
		for (final T node : view.nodes()) {
			if (node.inAnimation())
				return true;
		}
		return false;
	}

	@Override
	public void getBoundingBox(final RectangularShape rect) {
		if (this.layout == null) {
			rect.setFrame(this.bbox);
		} else {
			this.layout.getBoundingBox(rect);
		}
	}

	/**
	 * Sets the Start Operator for a Stream.
	 * 
	 * @param stream
	 *            The Stream to modify the Start of.
	 * @param operator
	 *            The Operator to make the Start Operator.
	 */
	@SuppressWarnings("unchecked")
	public void setStart(Stream stream, Operator operator) {
		stream.setStart(operator);
		final Shape streamShape = new RectangularNodeRealizer<T>().createNodeShape((T) stream, stream.getX(),
				stream.getY());
		double y = streamShape.getBounds2D().getMinY() + 1;
		operator.setPosition(stream.getX(), y);
		System.out.println(operator.getPos());

	}

	/**
	 * Sets the End Operator for a Stream.
	 * 
	 * @param stream
	 *            The Stream to modify the End of.
	 * @param operator
	 *            The Operator to make the End Operator.
	 */
	@SuppressWarnings("unchecked")
	public void setEnd(Stream stream, Operator operator) {
		stream.setEnd(operator);
		final Shape streamShape = new RectangularNodeRealizer<T>().createNodeShape((T) stream, stream.getX(),
				stream.getY());
		double y = streamShape.getBounds2D().getMaxY() - 1;
		operator.setPosition(stream.getX(), y);

	}

}
