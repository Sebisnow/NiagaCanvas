package niagaCanvas;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Shape;

import jkanvas.animation.AnimatedPosition;
import jkanvas.nodelink.EdgeRealizer;
import jkanvas.util.PaintUtil;

public class EdgeArrowRealizer<T extends AnimatedPosition> implements EdgeRealizer<T> {

	@Override
	public Shape createLineShape(final T from, final T to) {

		return PaintUtil.createLine(from.getX(), from.getY(), to.getX(), to.getY(), 1.0);
	}

	/**
	 * Getter.
	 * 
	 * @param from
	 *            The starting node.
	 * @param to
	 *            The ending node.
	 * @return The color of the edge. The default implementation returns
	 *         {@link Color#BLACK}.
	 */
	public Color getColor(final T from, final T to) {
		return Color.BLACK;
	}

	@Override
	public void drawLines(final Graphics2D g, final Shape edgeShape, final T from, final T to) {
		if (from instanceof NiagarinoOperators && to instanceof NiagarinoOperators) {
			NiagarinoOperators source = (NiagarinoOperators) from;
			NiagarinoOperators target = (NiagarinoOperators) to;
			target.setInputID(source.getIndex());
			source.setOutputID(target.getIndex());

			g.setColor(getColor(from, to));
			g.fill(edgeShape);
			// TODO create an arrow at the to position
			Polygon arrowHead = new Polygon();
			arrowHead.addPoint(0, 5);
			arrowHead.addPoint(-5, -5);
			arrowHead.addPoint(5, -5);
			g.draw(arrowHead);
			g.fill(arrowHead);

		}

	}
}
