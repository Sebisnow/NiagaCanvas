package niagaCanvas;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import jkanvas.util.BitSetIterable;

/**
 * Creates a simple view on a graph. Nodes can only be added. Saves all nodes.
 *
 * @author Joschi <josua.krause@gmail.com>
 * @param <NiagarinoOperators>
 *            The position type.
 * @param <T>
 */
@SuppressWarnings("hiding")
public class SimpleNodeLinkView<NiagarinoOperators> implements NodeLinkView<NiagarinoOperators> {

	/** Reverse map from nodes to ids. */
	private final Map<NiagarinoOperators, Integer> idMap = new HashMap<>();

	/** Dense list of nodes. */
	private final List<NiagarinoOperators> nodes = new ArrayList<>();

	/** List containing edges. */
	private final Map<Integer, BitSet> edges = new HashMap<>();

	/** Whether the graph is directed. */
	private final boolean isDirected;

	/**
	 * The node that is selected at the moment
	 */
	private NiagarinoOperators selected;

	/**
	 * Creates a simple node-link view.
	 *
	 * @param isDirected
	 *            Whether the graph is directed.
	 */
	public SimpleNodeLinkView(final boolean isDirected) {
		this.isDirected = isDirected;
		this.selected = null;
	}

	@Override
	public Set<NiagarinoOperators> nodes() {
		return idMap.keySet();
	}

	/**
	 * Checks in the idMap, where all nodes are saved with their ids, if there
	 * is a node (key) with this id and returns it.
	 * 
	 * @param id
	 *            The id of the node that should be reurned
	 * 
	 * @return Returns the Node with the specified id.
	 */
	@Override
	public NiagarinoOperators getNode(final int id) {
		for (NiagarinoOperators key : idMap.keySet()) {
			if (idMap.get(key) == id)
				return key;
		}
		// TODO maybe throw an error to give more info although null fares well
		// so far
		return null;
	}

	/**
	 * Getter.
	 *
	 * @param node
	 *            The node.
	 * @return The corresponding id.
	 */
	public int getId(final NiagarinoOperators node) {
		return idMap.get(node);
	}

	@Override
	public int nodeCount() {
		return idMap.size();
	}

	/** This method is called whenever the graph changes. */
	protected void onChange() {
		// nothing to do
	}

	/**
	 * Adds a node.
	 *
	 * @param node
	 *            The node.
	 */
	public void addNode(final NiagarinoOperators node) {

		if (idMap.containsKey(node))
			throw new IllegalArgumentException("node " + node + " already added");

		idMap.put(node, ((niagaCanvas.NiagarinoOperators) node).getID());
		edges.put(idMap.get(node), new BitSet());
		onChange();
	}

	@Override
	public String getName(final int index) {
		return "Node " + index;
	}

	@Override
	public BitSetIterable edgesFrom(final int node) {

		final int start = isDirected() ? 0 : node + 1;
		BitSet es = edges.get(node);
		/*
		 * TODO This non null assertion is only necessary, because on Operator
		 * creation it is called before the operator is created
		 * (DefaultNodeLink.renderEdges()). To fix this create Operator first
		 * before this call is initiated.
		 */
		if (es == null) {
			es = new BitSet();

		}

		return new BitSetIterable(es, start);
	}

	/**
	 * Checks whether the given indices are within bounds.
	 * 
	 * @deprecated since nodes that are deleted may not be the ones with the
	 *             largest index, this only works if either the indices change
	 *             or if only the last index is deleted. Neither is very
	 *             practicable.
	 * 
	 *
	 * @param from
	 *            The source index.
	 * @param to
	 *            The destination index.
	 */
	@SuppressWarnings("unused")
	private void checkIndex(final int from, final int to) {
		final int count = nodeCount();
		if (from < 0 || from >= count) {
			throw new IndexOutOfBoundsException("from out of bounds: " + from + "count: " + count);
		}
		if (to < 0 || to >= count) {
			throw new IndexOutOfBoundsException("to out of bounds: " + to + " count: " + count);
		}
	}

	/**
	 * Adds an edge between two nodes and saves OperatorID's in each operator as
	 * either child or parent. From is the parent of to and to is the child of
	 * from.
	 *
	 * @param from
	 *            The first node.
	 * @param to
	 *            The second node.
	 */
	public void addEdge(final NiagarinoOperators from, final NiagarinoOperators to) {
		// TODO only add edge if no connection exists yet. Meaning no child or
		// parent.
		int inval = niagaCanvas.NiagarinoOperators.INVALID;
		if (!areConnected(getId(from), getId(to))) {
			if (from instanceof Operator && to instanceof Operator && to != from) {
				if (((Operator) from).getChildID() == inval && ((Operator) to).getParentID() == inval) {
					if (this.addEdge(getId(from), getId(to))) {
						((Operator) from).setChildID(((Operator) to).getID());
						((Operator) to).setParentID(((Operator) from).getID());

						onChange();
					}
				}
			} else if (from instanceof Stream && to instanceof Stream && to != from) {
				if (((Stream) from).getChildID() == inval && ((Stream) to).getParentID() == inval) {
					if (this.addEdge(getId(from), getId(to))) {
						((Stream) from).setChildID(((Stream) to).getID());
						((Stream) to).setParentID(((Stream) from).getID());

						onChange();
					}
				}
			}
		}

	}

	/**
	 * TODO this could throw errors to help keeping the user informed about what
	 * went wrong.
	 * 
	 * Helper Method, that ensures that edges can only be created if the two
	 * nodes in question fulfill the requirements.
	 * 
	 * A StartOperator can have no entries from any operators.
	 * 
	 * An EndOperator can have no exits to any operators.
	 * 
	 * All other Operators can only have one entry and one exit.
	 * 
	 * @param from
	 *            Start of the candidate edge.
	 * @param to
	 *            End of the candidate Edge.
	 * 
	 * @return returns whether the Edge is allowed to be drawn or not.
	 */
	public boolean checkNodeProperties(NiagarinoOperators from1, NiagarinoOperators to1) {
		if (from1 instanceof Operator && to1 instanceof Operator) {
			// to increase readability and reduce redundancy
			Operator to = (Operator) to1, from = (Operator) from1;
			Stream st = (Stream) this.getNode(from.getStreamID());
			if (st.getID() != to.getStreamID()) {
				// The Operators are on different Streams, do not connect
				System.out.println("diff Streams");
				return false;
			} else if (st.getStart() == to) {
				// The ending Operator is the Start of the Stream.
				System.out.println("to is start");
				return false;
			} else if (st.getEnd() == from) {
				// The starting Operator is the End of the Stream.

				System.out.println("from is end");
				return false;
			} else if (from.getParentID() == to.getID() || to.getChildID() == from.getID()) {
				// Prevent Operators from being connected in both directions.
				System.out.println("interconnection");
				return false;
			} else if (to.getParentID() != niagaCanvas.NiagarinoOperators.INVALID
					|| from.getChildID() != niagaCanvas.NiagarinoOperators.INVALID) {
				// Operators have this kind of connection already, then do not
				// add edge.

				System.out
						.println("Parent or Child already present: " + from.getChildID() + " to: " + to.getParentID());
				return false;
			} else {

				return true;
			}
		} else {
			return true;
		}
	}

	/**
	 * 
	 * Adds an edge between two nodes.
	 *
	 * @param from
	 *            The id of the first node.
	 * @param to
	 *            The id of the second node.
	 */
	public boolean addEdge(final int from, final int to) {
		boolean ok = this.checkNodeProperties(this.getNode(from), this.getNode(to));
		if (ok) {
			// checkIndex(from, to);
			edges.get(from).set(to);
			if (!isDirected()) {
				edges.get(to).set(from);
			}
			System.out.println("Edge created : " + from + " " + to);
			onChange();
			return ok;
		}
		return ok;
	}

	/**
	 * Removes the edge given by the nodes.
	 *
	 * @param from
	 *            The source node.
	 * @param to
	 *            The destination node.
	 */
	public void removeEdge(final NiagarinoOperators from, final NiagarinoOperators to) {

		if (from instanceof Operator && to instanceof Operator) {
			removeEdge(getId(from), getId(to));
			((Operator) from).setChildID(niagaCanvas.NiagarinoOperators.INVALID);
			((Operator) to).setParentID(niagaCanvas.NiagarinoOperators.INVALID);
		} else if (from instanceof Stream && to instanceof Stream) {
			removeEdge(getId(from), getId(to));
			((Stream) from).setChildID(niagaCanvas.NiagarinoOperators.INVALID);
			((Stream) to).setParentID(niagaCanvas.NiagarinoOperators.INVALID);
		}
	}

	/**
	 * 
	 * Removes the edge given by the nodes.
	 *
	 * @param from
	 *            The source node index.
	 * @param to
	 *            The destination node index.
	 */
	public void removeEdge(final int from, final int to) {
		// checkIndex(from, to);
		try {
			edges.get(from).clear(to);
			if (!isDirected()) {
				edges.get(to).clear(from);
			}
		} catch (IndexOutOfBoundsException e) {
			// Edge already removed, do nothing.
		}
		onChange();
	}

	@Override
	public boolean areConnected(final int from, final int to) {
		// checkIndex(from, to);
		// System.out.println(edges);
		// TODO
		return edges.get(from).get(to);
	}

	/** Clears all edges. */
	public void clearEdges() {
		for (final BitSet es : edges.values()) {
			es.clear();
		}
		onChange();
	}

	@Override
	public boolean isDirected() {
		return isDirected;
	}

	@SuppressWarnings("unchecked")
	public void removeNode(NiagarinoOperators node) {

		/**
		 * If node is an Operator delete reference to it in parent Stream. If
		 * it's Stream then delete all Operators saved in the stream as well.
		 **/

		if (node instanceof Operator) {
			if (((Operator) node).getStreamID() != niagaCanvas.NiagarinoOperators.INVALID) {
				((Stream) this.getNode(((Operator) node).getStreamID())).getOperatorList().remove(node);
				((Operator) node).deleteStreamID();
			}
			this.delDependencies((niagaCanvas.NiagarinoOperators) node);
		} else if (node instanceof Stream) {
			// System.out.println(((Stream) node).getOperatorList());
			for (Operator op : ((Stream) node).getOperatorList()) {
				this.removeNode((NiagarinoOperators) op);
			}
		}
		// remove all edges connecting the node
		for (NiagarinoOperators candidateNode : this.nodes()) {
			if (areConnected(getId(node), getId(candidateNode))) {
				removeEdge(node, candidateNode);
			}
		}
		idMap.remove(node);
		nodes.remove(node);
	}

	/**
	 * Getter
	 * 
	 * @return the idMap
	 */
	public Map<NiagarinoOperators, Integer> getIdMap() {
		return idMap;
	}

	/**
	 * Getter
	 * 
	 * @return the nodes
	 */
	public List<NiagarinoOperators> getNodes() {
		return nodes;
	}

	/**
	 * Getter
	 * 
	 * @return the edges
	 */
	public Map<Integer, BitSet> getEdges() {
		return edges;
	}

	/**
	 * Helper Method to return all Operators on the Canvas.
	 * 
	 * @return The Operators on the Canvas as ArrayList.
	 */
	public ArrayList<Operator> getOperators() {
		ArrayList<Operator> opList = new ArrayList<Operator>();
		for (NiagarinoOperators ops : this.nodes()) {
			if (ops instanceof Operator) {
				opList.add((Operator) ops);
			}
		}
		return opList;
	}

	/**
	 * Helper Method to return all Streams on the Canvas.
	 * 
	 * @return The Streams on the Canvas as ArrayList.
	 */
	public ArrayList<Stream> getStreams() {
		ArrayList<Stream> opList = new ArrayList<Stream>();

		for (NiagarinoOperators ops : this.nodes()) {
			if (ops instanceof Stream) {
				opList.add((Stream) ops);
			}
		}
		return opList;
	}

	/**
	 * Deletes all the dependencies of a NiagarinoOperator. Within the child and
	 * parent nodes as well.
	 * 
	 * @param operator
	 *            THe operator that will be freed of all parent or child
	 *            dependencies.
	 */
	public void delDependencies(niagaCanvas.NiagarinoOperators operator) {
		int inv = niagaCanvas.NiagarinoOperators.INVALID;
		if (operator.getChildID() != inv) {
			((Operator) this.getNode(operator.getChildID())).setChildID(inv);
		}
		if (operator.getParentID() != inv) {
			((Operator) this.getNode(operator.getParentID())).setParentID(inv);
		}
	}

	/**
	 * Getter
	 * 
	 * @return the selected
	 */
	public NiagarinoOperators getSelected() {
		return selected;
	}

	/**
	 * Setter
	 * 
	 * @param selected
	 *            the selected to set
	 */
	public void setSelected(NiagarinoOperators selected) {
		this.selected = selected;
	}
}
