package niagaCanvas;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import jkanvas.util.BitSetIterable;

/**
 * Creates a simple view on a graph. Nodes can only be added. Saves all nodes.
 *
 * @author Joschi <josua.krause@gmail.com>
 * @param <NiagarinoOperators>
 *            The position type.
 * @param <T>
 */
public class SimpleNodeLinkView<NiagarinoOperators> implements NodeLinkView {

	/** Reverse map from nodes to ids. */
	private final Map<NiagarinoOperators, Integer> idMap = new HashMap<>();

	/** Dense list of nodes. */
	private final List<NiagarinoOperators> nodes = new ArrayList<>();

	/** List containing edges. */
	private final List<BitSet> edges = new ArrayList<>();

	/** Whether the graph is directed. */
	private final boolean isDirected;

	/**
	 * Creates a simple node-link view.
	 *
	 * @param isDirected
	 *            Whether the graph is directed.
	 */
	public SimpleNodeLinkView(final boolean isDirected) {
		this.isDirected = isDirected;
	}

	@Override
	public Iterable<NiagarinoOperators> nodes() {
		return nodes;
	}

	@Override
	public NiagarinoOperators getNode(final int id) {
		return nodes.get(id);
	}

	/**
	 * Getter.
	 *
	 * @param node
	 *            The node.
	 * @return The corresponding id.
	 */
	private int getId(final NiagarinoOperators node) {
		return idMap.get(node);
	}

	@Override
	public int nodeCount() {
		return nodes.size();
	}

	/** This method is called whenever the graph changes. */
	protected void onChange() {
		// nothing to do
	}

	/**
	 * Adds a node.
	 *
	 * @param node
	 *            The node.
	 */
	public void addNode(final NiagarinoOperators node) {

		if (idMap.containsKey(node))
			throw new IllegalArgumentException("node " + node + " already added");
		idMap.put(node, ((niagaCanvas.NiagarinoOperators) node).getID());
		nodes.add(node);
		edges.add(new BitSet());
		onChange();
	}

	@Override
	public String getName(final int index) {
		return "Node " + index;
	}

	@Override
	public Iterable<Integer> edgesFrom(final int node) {
		// TODO try node +1 for directed as well
		final int start = isDirected() ? 0 : node + 1;
		final BitSet es = edges.get(node);
		return new BitSetIterable(es, start);
	}

	/**
	 * Checks whether the given indices are within bounds.
	 *
	 * @param from
	 *            The source index.
	 * @param to
	 *            The destination index.
	 */
	// private void checkIndex(final int from, final int to) {
	// final int count = nodeCount();
	// if (from < 0 || from >= count)
	// throw new IndexOutOfBoundsException("from out of bounds: " + from + "
	// count: " + count);
	// if (to < 0 || to >= count)
	// throw new IndexOutOfBoundsException("to out of bounds: " + to + " count:
	// " + count);
	// }

	/**
	 * Adds an edge between two nodes and saves OperatorID's in each operator as
	 * either child or parent. From is the parent of to and to is the child of
	 * from.
	 *
	 * @param from
	 *            The first node.
	 * @param to
	 *            The second node.
	 */
	public void addEdge(final NiagarinoOperators from, final NiagarinoOperators to) {
		addEdge(getId(from), getId(to));

		if (from instanceof Operator && to instanceof Operator) {
			((Operator) from).setChildID(((Operator) to).getID());
			((Operator) to).setParentID(((Operator) from).getID());
			// System.out.println("From: " + ((Operator) from).name + " To: " +
			// ((Operator) to).name);
		}

	}

	/**
	 * 
	 * Adds an edge between two nodes.
	 *
	 * @param from
	 *            The id of the first node.
	 * @param to
	 *            The id of the second node.
	 */
	public void addEdge(final int from, final int to) {
		// checkIndex(from, to);
		edges.get(from).set(to);
		if (!isDirected()) {
			edges.get(to).set(from);
		}
		onChange();
	}

	/**
	 * Removes the edge given by the nodes.
	 *
	 * @param from
	 *            The source node.
	 * @param to
	 *            The destination node.
	 */
	public void removeEdge(final NiagarinoOperators from, final NiagarinoOperators to) {
		removeEdge(getId(from), getId(to));
		if (from instanceof Operator && to instanceof Operator) {
			((Operator) from).setChildID(niagaCanvas.NiagarinoOperators.INVALID);
			((Operator) to).setParentID(niagaCanvas.NiagarinoOperators.INVALID);
		}
	}

	/**
	 * 
	 * Removes the edge given by the nodes.
	 *
	 * @param from
	 *            The source node index.
	 * @param to
	 *            The destination node index.
	 */
	public void removeEdge(final int from, final int to) {
		// checkIndex(from, to);
		edges.get(from).clear(to);
		if (!isDirected()) {
			edges.get(to).clear(from);
		}
		onChange();
	}

	@Override
	public boolean areConnected(final int from, final int to) {
		// checkIndex(from, to);
		return edges.get(from).get(to);
	}

	/** Clears all edges. */
	public void clearEdges() {
		for (final BitSet es : edges) {
			es.clear();
		}
		onChange();
	}

	@Override
	public boolean isDirected() {
		return isDirected;
	}

	public void removeNode(NiagarinoOperators node) {
		nodes.remove(node);
		// remove all edges connecting the node
		for (NiagarinoOperators candidateNode : this.nodes()) {
			if (areConnected(getId(node), getId(candidateNode))) {
				removeEdge(node, candidateNode);
			}
		}
	}
}
